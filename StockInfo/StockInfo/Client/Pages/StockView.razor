@page "/tickers/{ticker}"

@inject AuthenticationStateProvider authentication
@inject HttpClient httpClient

@attribute [Authorize]


@if (info == null)
{
    <p>Loading...</p>
}
else if (notAvailable)
{
    <p>Not found</p>
}
else
{
    <div class="row">
        <div class="col-4"></div>
        <div class="col-4">
            <h2 class="text-center">@info.Name</h2>
        </div>
        <div class="col-4 text-right">
            <label class="mr-3">@(info.IsSaved ? "Usuń z zapisanych" : "Dodaj do zapisanych")</label>
            <RadzenSwitch @bind-Value="info.IsSaved" Change="ToggleSave"/>
        </div>
    </div>
    <div class="row">
        <div class="col-4 text-center">
            <img src="@($"https://eodhistoricaldata.com/img/logos/US/{Ticker}.png")" onerror="this.onerror = null; this.src = 'no_image.jpg';" style="height: 200px"/>
        </div>
        <div class="col-8">
            <RadzenTabs Style="height: 100%">
                <Tabs>
                    <RadzenTabsItem Text="Ogólne informacje">
                        <div class="w-50">
                            <div class="stock-info-item">
                                <span>Nazwa:</span>
                                <span>@info.Name</span>
                            </div>
                            <div class="stock-info-item">
                                <span>Giełda:</span>
                                <span>@info.Exchange</span>
                            </div>
                            <div class="stock-info-item">
                                <span>Waluta:</span>
                                <span>@info.Currency</span>
                            </div>
                            <div class="stock-info-item">
                                <span>Sektor:</span>
                                <span class="text-lowercase">@info.Sector</span>
                            </div>
                            <div class="stock-info-item">
                                <span>Przemysł:</span>
                                <span class="text-lowercase">@info.Industry</span>
                            </div>
                        </div>
                    </RadzenTabsItem>
                    <RadzenTabsItem Text="Opis">
                        <span class="stock-description">@info.Description</span>
                    </RadzenTabsItem>
                    <RadzenTabsItem Text="Wartości">
                        @{
                            var newestValues = _chartData.FirstOrDefault();
                            <div class="w-50">
                                <div class="stock-info-item">
                                    <span>Open:</span>
                                    <span>@newestValues.Open</span>
                                </div>
                                <div class="stock-info-item">
                                    <span>Close:</span>
                                    <span>@newestValues.Close</span>
                                </div>
                                <div class="stock-info-item">
                                    <span>Low:</span>
                                    <span>@newestValues.Low</span>
                                </div>
                                <div class="stock-info-item">
                                    <span>High:</span>
                                    <span>@newestValues.High</span>
                                </div>
                                <div class="stock-info-item">
                                    <span>Volume:</span>
                                    <span>@newestValues.Volume</span>
                                </div>
                            </div>
                        }
                    </RadzenTabsItem>
                </Tabs>
            </RadzenTabs>
        </div>
    </div>
    <div class="col-12">
        <StockChart ChartData="_chartData" />
    </div>
}

<style>
    .stock-info-item {
        display: flex;
        justify-content: space-between;
        padding-bottom: 1rem;
    }

    .stock-description{
        line-height: 1.5rem;
    }

    .rz-switch{
        vertical-align: middle;
    }
</style>


@code {
    [Parameter]
    public string Ticker { get; set; }

    private List<StockValueDto> _chartData;
    private StockInfoDto info;

    private string username;
    private int numberOfArticles = 5;
    private bool notAvailable = false;
    private bool processing = false; //for displaying loading circle while toggling saved state

    protected override async Task OnInitializedAsync()
    {
        //_chartData = new List<StockValueDto>();
        var identity = await authentication.GetAuthenticationStateAsync();
        username = identity.User.Identity.Name;
    }

    protected override async Task OnParametersSetAsync()
    {
        var response = await httpClient.GetAsync($"api/tickers/{Ticker}?username={username}");

        if(!response.IsSuccessStatusCode)
        {
            //TODO: Show toast message
        }
        else
        {
            info = JsonConvert.DeserializeObject<StockInfoDto>(await response.Content.ReadAsStringAsync());
        }

        response = await httpClient.GetAsync($"api/tickers/{Ticker}/data");

        if (!response.IsSuccessStatusCode)
        {
            //TODO: Show toast message
        }
        else
        {
            _chartData = JsonConvert.DeserializeObject<List<StockValueDto>>(await response.Content.ReadAsStringAsync());
            Console.WriteLine(_chartData.FirstOrDefault().Date + ", " + _chartData.FirstOrDefault().Close);
        }
    }

    private async Task ToggleSave()
    {
        //processing = true;

        var response = await httpClient.PostAsJsonAsync<SavedStock>($"api/tickers/saved", new SavedStock { Ticker = Ticker, Username = username });

        if(!response.IsSuccessStatusCode)
        {
            info.IsSaved = !info.IsSaved;
        }

        //if (response.IsSuccessStatusCode)
        //{
        //    info.IsSaved = !info.IsSaved;
        //}

        //processing = false;
    }
}
